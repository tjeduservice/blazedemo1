<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="blazedemo" enabled="true">
      <stringProp name="TestPlan.comments">This test plan was created by the BlazeMeter converter v.2.1.386. Please contact support@blazemeter.com for further support.</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
            <stringProp name="Header.value">1</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip, deflate</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="oldcity" elementType="Argument">
            <stringProp name="Argument.name">oldcity</stringProp>
            <stringProp name="Argument.value">Seoul</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">blazedemo.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Test" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1. http://blazedemo.com/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="fromPort" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">fromPort</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;option value=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">No_fromPort</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2. http://blazedemo.com/reserve.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">Boston</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">Rome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">reserve.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">16353</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3. http://blazedemo.com/purchase.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="flight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">flight</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">Boston</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="price" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">price</stringProp>
                  <stringProp name="Argument.value">432.98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">Rome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="airline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">airline</stringProp>
                  <stringProp name="Argument.value">United Airlines</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">purchase.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/reserve.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">6618</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="4. http://blazedemo.com/confirmation.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="zipCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">zipCode</stringProp>
                  <stringProp name="Argument.value">13425</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address</stringProp>
                  <stringProp name="Argument.value">127 main st.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">Hometown</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nameOnCard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nameOnCard</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cardType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cardType</stringProp>
                  <stringProp name="Argument.value">visa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardMonth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardMonth</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rememberMe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rememberMe</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">MA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardYear" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardYear</stringProp>
                  <stringProp name="Argument.value">2017</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="inputName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">inputName</stringProp>
                  <stringProp name="Argument.value">TK</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">confirmation.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/purchase.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">77746</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="5. http://blazedemo.com/purchase.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="flight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">flight</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">Boston</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="price" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">price</stringProp>
                  <stringProp name="Argument.value">432.98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">Rome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="airline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">airline</stringProp>
                  <stringProp name="Argument.value">United Airlines</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">purchase.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/reserve.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">44531</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1. Get the JSON data" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;schema&quot;: &quot;2.0&quot;,
  &quot;name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;position&quot;: 0,
  &quot;active&quot;: true,
  &quot;created_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;updated_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;title&quot;: &quot;RN Question Trainer Test 7&quot;,
  &quot;description&quot;: null,
  &quot;timer_recipe&quot;: { &quot;allocated_time&quot;: 0, &quot;question_suggested_time&quot;: 72000 },
  &quot;recipe_type&quot;: &quot;question-trainers&quot;,
  &quot;randomize_answer_choices&quot;: false,
  &quot;metadata&quot;: {
    &quot;subject&quot;: &quot;&quot;,
    &quot;thresholdpercentcorrect&quot;: &quot;60&quot;,
    &quot;thresholdpercentilerank&quot;: &quot;0&quot;
  },
  &quot;taxonomy_uris&quot;: [
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneeds-taxonomy&quot;,
      &quot;version_id&quot;: &quot;f1857208-c20c-4c5d-833a-3ea13adf8cdf&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-cognitivelevel-taxonomy&quot;,
      &quot;version_id&quot;: &quot;fe0c3b48-e530-4727-8e59-082946f38d33&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneedcategory-taxonomy&quot;,
      &quot;version_id&quot;: &quot;b721d04b-37ff-4dd4-b159-685de67066bf&quot;
    }
  ],
  &quot;performance_recipe_uri&quot;: null,
  &quot;norms_uri&quot;: null,
  &quot;assessment_recipe&quot;: {
    &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
    &quot;strands&quot;: [
      {
        &quot;name&quot;: &quot;safe_effective_care_environment&quot;,
        &quot;substrand_names&quot;: [&quot;management_care&quot;, &quot;safety_infection_control&quot;],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;health_promotion_maintenance&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;psychosocial_integrity&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;physiological_integrity&quot;,
        &quot;substrand_names&quot;: [
          &quot;basic_care_comfort&quot;,
          &quot;pharmacological_therapies&quot;,
          &quot;reduction_risk_potential&quot;,
          &quot;physiological_adaptation&quot;
        ],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;knowledge&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;comprehension&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;application&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;analysis&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      }
    ],
    &quot;max_theta&quot;: null,
    &quot;min_theta&quot;: null
  },
  &quot;sections&quot;: [
    {
      &quot;id&quot;: &quot;f45bcf0d-2391-42b5-9ec2-c5c31a5e65c1&quot;,
      &quot;schema&quot;: &quot;2.0&quot;,
      &quot;name&quot;: &quot;section1&quot;,
      &quot;kaplan_type&quot;: &quot;sequence-section&quot;,
      &quot;parent&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
      &quot;position&quot;: 0,
      &quot;active&quot;: true,
      &quot;created_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;updated_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;title&quot;: &quot;section1&quot;,
      &quot;metadata&quot;: null,
      &quot;randomize_answer_choices&quot;: true,
      &quot;timer_recipe&quot;: null,
      &quot;selection_recipe&quot;: {
        &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
        &quot;item_sources&quot;: [
          {
            &quot;source_type&quot;: &quot;PreStitched&quot;,
            &quot;item_selection_rule&quot;: &quot;Linear&quot;,
            &quot;item_exposure_candidates_count&quot;: null,
            &quot;require_calibrated&quot;: false,
            &quot;content_names&quot;: [
              &quot;n002901&quot;,
              &quot;n002902&quot;,
              &quot;n002904&quot;,
              &quot;n002905&quot;,
              &quot;n002906&quot;,
              &quot;n002907&quot;,
              &quot;n002909&quot;,
              &quot;n002910&quot;,
              &quot;n002912&quot;,
              &quot;n002913&quot;,
              &quot;n002915&quot;,
              &quot;n002916&quot;,
              &quot;n002917&quot;,
              &quot;n002918&quot;,
              &quot;n002920&quot;,
              &quot;n002921&quot;,
              &quot;n002922&quot;,
              &quot;n002923&quot;,
              &quot;n002924&quot;,
              &quot;n002925&quot;,
              &quot;n002926&quot;,
              &quot;n002927&quot;,
              &quot;n002930&quot;,
              &quot;n002932&quot;,
              &quot;n002933&quot;,
              &quot;n002934&quot;,
              &quot;n002936&quot;,
              &quot;n002937&quot;,
              &quot;n002939&quot;,
              &quot;n002941&quot;,
              &quot;n002942&quot;,
              &quot;n002943&quot;,
              &quot;n002944&quot;,
              &quot;n002945&quot;,
              &quot;n002946&quot;,
              &quot;n002947&quot;,
              &quot;n002948&quot;,
              &quot;n002949&quot;,
              &quot;n002950&quot;,
              &quot;n002952&quot;,
              &quot;n002953&quot;,
              &quot;n002954&quot;,
              &quot;n002955&quot;,
              &quot;n002956&quot;,
              &quot;n002957&quot;,
              &quot;n002958&quot;,
              &quot;n002959&quot;,
              &quot;n002961&quot;,
              &quot;n002962&quot;,
              &quot;n002963&quot;,
              &quot;n002964&quot;,
              &quot;n002965&quot;,
              &quot;n002967&quot;,
              &quot;n002968&quot;,
              &quot;n002969&quot;,
              &quot;n002971&quot;,
              &quot;n002973&quot;,
              &quot;n002974&quot;,
              &quot;n002975&quot;,
              &quot;n002976&quot;,
              &quot;n002977&quot;,
              &quot;n002978&quot;,
              &quot;n002980&quot;,
              &quot;n002981&quot;,
              &quot;n002982&quot;,
              &quot;n002983&quot;,
              &quot;n002984&quot;,
              &quot;n002987&quot;,
              &quot;n002989&quot;,
              &quot;n002990&quot;,
              &quot;n002991&quot;,
              &quot;n002992&quot;,
              &quot;n002993&quot;,
              &quot;n002994&quot;,
              &quot;n002995&quot;,
              &quot;n002996&quot;,
              &quot;n002997&quot;,
              &quot;n002998&quot;,
              &quot;n002999&quot;,
              &quot;n003001&quot;,
              &quot;n003003&quot;,
              &quot;n003004&quot;,
              &quot;n003005&quot;,
              &quot;n003006&quot;,
              &quot;n003007&quot;,
              &quot;n003008&quot;,
              &quot;n003012&quot;,
              &quot;n003013&quot;,
              &quot;n003014&quot;,
              &quot;n003015&quot;,
              &quot;n003016&quot;,
              &quot;n003017&quot;,
              &quot;n003018&quot;,
              &quot;n003019&quot;,
              &quot;n003020&quot;,
              &quot;n003021&quot;,
              &quot;n003023&quot;,
              &quot;n003024&quot;,
              &quot;n003026&quot;,
              &quot;n003027&quot;,
              &quot;n003030&quot;,
              &quot;n003031&quot;,
              &quot;n003032&quot;,
              &quot;n003033&quot;,
              &quot;n003034&quot;,
              &quot;n003036&quot;,
              &quot;n003037&quot;,
              &quot;n003038&quot;,
              &quot;n003039&quot;,
              &quot;n003040&quot;,
              &quot;n003041&quot;,
              &quot;n003042&quot;,
              &quot;n003043&quot;,
              &quot;n003044&quot;,
              &quot;n003045&quot;,
              &quot;n003046&quot;,
              &quot;n003047&quot;,
              &quot;n003048&quot;,
              &quot;n003049&quot;,
              &quot;n003050&quot;,
              &quot;n003051&quot;,
              &quot;n003052&quot;,
              &quot;n003053&quot;,
              &quot;n003054&quot;,
              &quot;n003055&quot;,
              &quot;n003057&quot;,
              &quot;n003058&quot;,
              &quot;n003059&quot;,
              &quot;n003060&quot;,
              &quot;n003061&quot;,
              &quot;n003062&quot;,
              &quot;n003063&quot;,
              &quot;n003064&quot;,
              &quot;n003065&quot;,
              &quot;n003066&quot;,
              &quot;n003067&quot;,
              &quot;n003068&quot;,
              &quot;n003069&quot;,
              &quot;n003070&quot;,
              &quot;n003074&quot;,
              &quot;n003075&quot;,
              &quot;n003076&quot;,
              &quot;n003077&quot;,
              &quot;n003078&quot;,
              &quot;n003079&quot;,
              &quot;n003080&quot;,
              &quot;n003081&quot;,
              &quot;n003082&quot;,
              &quot;n003083&quot;,
              &quot;n003084&quot;,
              &quot;n003085&quot;,
              &quot;n003086&quot;,
              &quot;n003087&quot;,
              &quot;n003088&quot;,
              &quot;n003089&quot;,
              &quot;n003090&quot;,
              &quot;n003091&quot;,
              &quot;n003092&quot;,
              &quot;n003093&quot;,
              &quot;n003094&quot;,
              &quot;n003095&quot;,
              &quot;n003096&quot;,
              &quot;n003097&quot;,
              &quot;n003098&quot;,
              &quot;n003099&quot;,
              &quot;n003100&quot;,
              &quot;n003101&quot;,
              &quot;n003102&quot;,
              &quot;n003103&quot;,
              &quot;n003104&quot;,
              &quot;n003107&quot;,
              &quot;n003108&quot;,
              &quot;n003109&quot;,
              &quot;n003110&quot;,
              &quot;n003112&quot;,
              &quot;n003113&quot;,
              &quot;n003114&quot;,
              &quot;n003115&quot;,
              &quot;n003116&quot;,
              &quot;n003117&quot;,
              &quot;n003118&quot;,
              &quot;n003119&quot;,
              &quot;n003121&quot;,
              &quot;n003122&quot;,
              &quot;n003124&quot;,
              &quot;n003125&quot;,
              &quot;n003126&quot;,
              &quot;n003127&quot;,
              &quot;n003128&quot;,
              &quot;n003129&quot;,
              &quot;n003130&quot;,
              &quot;n003132&quot;,
              &quot;n003134_ALTm.mod&quot;,
              &quot;n003135&quot;,
              &quot;n003136&quot;,
              &quot;n003137&quot;,
              &quot;n003138&quot;,
              &quot;n003139&quot;,
              &quot;n003140&quot;,
              &quot;n003141&quot;,
              &quot;n003142&quot;,
              &quot;n003143&quot;,
              &quot;n003144&quot;,
              &quot;n003146&quot;,
              &quot;n003148&quot;,
              &quot;n003149&quot;,
              &quot;n003151&quot;,
              &quot;n003152&quot;,
              &quot;n003153&quot;,
              &quot;n003154&quot;,
              &quot;n003156&quot;,
              &quot;n003158&quot;,
              &quot;n003159&quot;,
              &quot;n003162&quot;,
              &quot;n003163&quot;,
              &quot;n003164&quot;,
              &quot;n003165&quot;,
              &quot;n002903_ALT&quot;,
              &quot;n002911_ALT&quot;,
              &quot;n002914_ALT.mod&quot;,
              &quot;n002919_ALTm&quot;,
              &quot;n002928_ALT.mod&quot;,
              &quot;n003000_ALT.mod&quot;,
              &quot;n003002_ALT&quot;,
              &quot;n003009_ALT&quot;,
              &quot;n003011_ALT&quot;,
              &quot;n003022_ALT&quot;,
              &quot;n003025_ALT&quot;,
              &quot;n003028_ALT&quot;,
              &quot;n003029_ALT&quot;,
              &quot;n003035_ALT&quot;,
              &quot;n003056_ALT&quot;,
              &quot;n003071_ALT&quot;,
              &quot;n003072_ALT&quot;,
              &quot;n003073_ALT.mod&quot;,
              &quot;n003105_ALT&quot;,
              &quot;n003106_ALT&quot;,
              &quot;n003111_ALT&quot;,
              &quot;n003120_ALTm&quot;,
              &quot;n003133_ALT&quot;,
              &quot;n003145_ALT&quot;,
              &quot;n003147_ALT&quot;,
              &quot;n003150_ALT.mod&quot;,
              &quot;n003155_ALT&quot;,
              &quot;n003157_ALT&quot;,
              &quot;n003160_ALT.mod&quot;,
              &quot;n003161_ALT&quot;,
              &quot;n002929_ALT&quot;,
              &quot;n002931_ALT&quot;,
              &quot;n002935_ALT&quot;,
              &quot;n002938_ALT&quot;,
              &quot;n002940_ALT&quot;,
              &quot;n002951_ALT&quot;,
              &quot;n002960_ALT&quot;,
              &quot;n002966_ALT&quot;,
              &quot;n002970_ALT&quot;,
              &quot;n002972_ALT&quot;,
              &quot;n002979_ALT&quot;,
              &quot;n002986_ALT&quot;,
              &quot;n002988_ALT&quot;,
              &quot;n003010_ALT.mod&quot;,
              &quot;n002908_ALT.mod&quot;,
              &quot;n002985_ALT&quot;,
              &quot;n003123_ALT&quot;,
              &quot;n003131_ALT&quot;
            ],
            &quot;weight&quot;: null
          }
        ],
        &quot;min_questions&quot;: 265,
        &quot;max_questions&quot;: 265,
        &quot;batch_size&quot;: 265
      }
    }
  ],
  &quot;recipe_name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;recipe_id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;recipe_uri&quot;: &quot;atom://content/rn-question-trainer-test-7&quot;,
  &quot;performance_recipe&quot;: {
    &quot;name&quot;: &quot;default&quot;,
    &quot;kaplan_type&quot;: &quot;performance-recipe&quot;,
    &quot;aggregations&quot;: [{ &quot;name&quot;: &quot;overall&quot;, &quot;sections&quot;: [&quot;ALL&quot;] }]
  }
}
</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ParentId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">parentId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..sections..parent</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_ParentId</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="recency_name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">recency_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.recency_threshold== 200)].name</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_RecencyName</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="yield_name" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">yield_name</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..yield_scale.[?(@.name== &quot;wayne&quot;)].coefficient</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">No_yield_name</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">loop</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">true</boolProp>
            <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
          </CounterConfig>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2. Pass Parent ID to request" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">
ParentId: ${parentId}, Recency_name: ${__V(recency_name_${loop})}, Yield_scale_name: ${__V(yield_name_${loop})}</stringProp>
            <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;schema&quot;: &quot;2.0&quot;,
  &quot;name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;position&quot;: 0,
  &quot;active&quot;: true,
  &quot;created_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;updated_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;title&quot;: &quot;RN Question Trainer Test 7&quot;,
  &quot;description&quot;: null,
  &quot;timer_recipe&quot;: { &quot;allocated_time&quot;: 0, &quot;question_suggested_time&quot;: 72000 },
  &quot;recipe_type&quot;: &quot;question-trainers&quot;,
  &quot;randomize_answer_choices&quot;: false,
  &quot;metadata&quot;: {
    &quot;subject&quot;: &quot;&quot;,
    &quot;thresholdpercentcorrect&quot;: &quot;60&quot;,
    &quot;thresholdpercentilerank&quot;: &quot;0&quot;
  },
  &quot;taxonomy_uris&quot;: [
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneeds-taxonomy&quot;,
      &quot;version_id&quot;: &quot;f1857208-c20c-4c5d-833a-3ea13adf8cdf&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-cognitivelevel-taxonomy&quot;,
      &quot;version_id&quot;: &quot;fe0c3b48-e530-4727-8e59-082946f38d33&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneedcategory-taxonomy&quot;,
      &quot;version_id&quot;: &quot;b721d04b-37ff-4dd4-b159-685de67066bf&quot;
    }
  ],
  &quot;performance_recipe_uri&quot;: null,
  &quot;norms_uri&quot;: null,
  &quot;assessment_recipe&quot;: {
    &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
    &quot;strands&quot;: [
      {
        &quot;name&quot;: &quot;safe_effective_care_environment&quot;,
        &quot;substrand_names&quot;: [&quot;management_care&quot;, &quot;safety_infection_control&quot;],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;health_promotion_maintenance&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;psychosocial_integrity&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;physiological_integrity&quot;,
        &quot;substrand_names&quot;: [
          &quot;basic_care_comfort&quot;,
          &quot;pharmacological_therapies&quot;,
          &quot;reduction_risk_potential&quot;,
          &quot;physiological_adaptation&quot;
        ],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;knowledge&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;comprehension&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;application&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;analysis&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      }
    ],
    &quot;max_theta&quot;: null,
    &quot;min_theta&quot;: null
  },
  &quot;sections&quot;: [
    {
      &quot;id&quot;: &quot;f45bcf0d-2391-42b5-9ec2-c5c31a5e65c1&quot;,
      &quot;schema&quot;: &quot;2.0&quot;,
      &quot;name&quot;: &quot;section1&quot;,
      &quot;kaplan_type&quot;: &quot;sequence-section&quot;,
      &quot;parent&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
      &quot;position&quot;: 0,
      &quot;active&quot;: true,
      &quot;created_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;updated_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;title&quot;: &quot;section1&quot;,
      &quot;metadata&quot;: null,
      &quot;randomize_answer_choices&quot;: true,
      &quot;timer_recipe&quot;: null,
      &quot;selection_recipe&quot;: {
        &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
        &quot;item_sources&quot;: [
          {
            &quot;source_type&quot;: &quot;PreStitched&quot;,
            &quot;item_selection_rule&quot;: &quot;Linear&quot;,
            &quot;item_exposure_candidates_count&quot;: null,
            &quot;require_calibrated&quot;: false,
            &quot;content_names&quot;: [
              &quot;n002901&quot;,
              &quot;n002902&quot;,
              &quot;n002904&quot;,
              &quot;n002905&quot;,
              &quot;n002906&quot;,
              &quot;n002907&quot;,
              &quot;n002909&quot;,
              &quot;n002910&quot;,
              &quot;n002912&quot;,
              &quot;n002913&quot;,
              &quot;n002915&quot;,
              &quot;n002916&quot;,
              &quot;n002917&quot;,
              &quot;n002918&quot;,
              &quot;n002920&quot;,
              &quot;n002921&quot;,
              &quot;n002922&quot;,
              &quot;n002923&quot;,
              &quot;n002924&quot;,
              &quot;n002925&quot;,
              &quot;n002926&quot;,
              &quot;n002927&quot;,
              &quot;n002930&quot;,
              &quot;n002932&quot;,
              &quot;n002933&quot;,
              &quot;n002934&quot;,
              &quot;n002936&quot;,
              &quot;n002937&quot;,
              &quot;n002939&quot;,
              &quot;n002941&quot;,
              &quot;n002942&quot;,
              &quot;n002943&quot;,
              &quot;n002944&quot;,
              &quot;n002945&quot;,
              &quot;n002946&quot;,
              &quot;n002947&quot;,
              &quot;n002948&quot;,
              &quot;n002949&quot;,
              &quot;n002950&quot;,
              &quot;n002952&quot;,
              &quot;n002953&quot;,
              &quot;n002954&quot;,
              &quot;n002955&quot;,
              &quot;n002956&quot;,
              &quot;n002957&quot;,
              &quot;n002958&quot;,
              &quot;n002959&quot;,
              &quot;n002961&quot;,
              &quot;n002962&quot;,
              &quot;n002963&quot;,
              &quot;n002964&quot;,
              &quot;n002965&quot;,
              &quot;n002967&quot;,
              &quot;n002968&quot;,
              &quot;n002969&quot;,
              &quot;n002971&quot;,
              &quot;n002973&quot;,
              &quot;n002974&quot;,
              &quot;n002975&quot;,
              &quot;n002976&quot;,
              &quot;n002977&quot;,
              &quot;n002978&quot;,
              &quot;n002980&quot;,
              &quot;n002981&quot;,
              &quot;n002982&quot;,
              &quot;n002983&quot;,
              &quot;n002984&quot;,
              &quot;n002987&quot;,
              &quot;n002989&quot;,
              &quot;n002990&quot;,
              &quot;n002991&quot;,
              &quot;n002992&quot;,
              &quot;n002993&quot;,
              &quot;n002994&quot;,
              &quot;n002995&quot;,
              &quot;n002996&quot;,
              &quot;n002997&quot;,
              &quot;n002998&quot;,
              &quot;n002999&quot;,
              &quot;n003001&quot;,
              &quot;n003003&quot;,
              &quot;n003004&quot;,
              &quot;n003005&quot;,
              &quot;n003006&quot;,
              &quot;n003007&quot;,
              &quot;n003008&quot;,
              &quot;n003012&quot;,
              &quot;n003013&quot;,
              &quot;n003014&quot;,
              &quot;n003015&quot;,
              &quot;n003016&quot;,
              &quot;n003017&quot;,
              &quot;n003018&quot;,
              &quot;n003019&quot;,
              &quot;n003020&quot;,
              &quot;n003021&quot;,
              &quot;n003023&quot;,
              &quot;n003024&quot;,
              &quot;n003026&quot;,
              &quot;n003027&quot;,
              &quot;n003030&quot;,
              &quot;n003031&quot;,
              &quot;n003032&quot;,
              &quot;n003033&quot;,
              &quot;n003034&quot;,
              &quot;n003036&quot;,
              &quot;n003037&quot;,
              &quot;n003038&quot;,
              &quot;n003039&quot;,
              &quot;n003040&quot;,
              &quot;n003041&quot;,
              &quot;n003042&quot;,
              &quot;n003043&quot;,
              &quot;n003044&quot;,
              &quot;n003045&quot;,
              &quot;n003046&quot;,
              &quot;n003047&quot;,
              &quot;n003048&quot;,
              &quot;n003049&quot;,
              &quot;n003050&quot;,
              &quot;n003051&quot;,
              &quot;n003052&quot;,
              &quot;n003053&quot;,
              &quot;n003054&quot;,
              &quot;n003055&quot;,
              &quot;n003057&quot;,
              &quot;n003058&quot;,
              &quot;n003059&quot;,
              &quot;n003060&quot;,
              &quot;n003061&quot;,
              &quot;n003062&quot;,
              &quot;n003063&quot;,
              &quot;n003064&quot;,
              &quot;n003065&quot;,
              &quot;n003066&quot;,
              &quot;n003067&quot;,
              &quot;n003068&quot;,
              &quot;n003069&quot;,
              &quot;n003070&quot;,
              &quot;n003074&quot;,
              &quot;n003075&quot;,
              &quot;n003076&quot;,
              &quot;n003077&quot;,
              &quot;n003078&quot;,
              &quot;n003079&quot;,
              &quot;n003080&quot;,
              &quot;n003081&quot;,
              &quot;n003082&quot;,
              &quot;n003083&quot;,
              &quot;n003084&quot;,
              &quot;n003085&quot;,
              &quot;n003086&quot;,
              &quot;n003087&quot;,
              &quot;n003088&quot;,
              &quot;n003089&quot;,
              &quot;n003090&quot;,
              &quot;n003091&quot;,
              &quot;n003092&quot;,
              &quot;n003093&quot;,
              &quot;n003094&quot;,
              &quot;n003095&quot;,
              &quot;n003096&quot;,
              &quot;n003097&quot;,
              &quot;n003098&quot;,
              &quot;n003099&quot;,
              &quot;n003100&quot;,
              &quot;n003101&quot;,
              &quot;n003102&quot;,
              &quot;n003103&quot;,
              &quot;n003104&quot;,
              &quot;n003107&quot;,
              &quot;n003108&quot;,
              &quot;n003109&quot;,
              &quot;n003110&quot;,
              &quot;n003112&quot;,
              &quot;n003113&quot;,
              &quot;n003114&quot;,
              &quot;n003115&quot;,
              &quot;n003116&quot;,
              &quot;n003117&quot;,
              &quot;n003118&quot;,
              &quot;n003119&quot;,
              &quot;n003121&quot;,
              &quot;n003122&quot;,
              &quot;n003124&quot;,
              &quot;n003125&quot;,
              &quot;n003126&quot;,
              &quot;n003127&quot;,
              &quot;n003128&quot;,
              &quot;n003129&quot;,
              &quot;n003130&quot;,
              &quot;n003132&quot;,
              &quot;n003134_ALTm.mod&quot;,
              &quot;n003135&quot;,
              &quot;n003136&quot;,
              &quot;n003137&quot;,
              &quot;n003138&quot;,
              &quot;n003139&quot;,
              &quot;n003140&quot;,
              &quot;n003141&quot;,
              &quot;n003142&quot;,
              &quot;n003143&quot;,
              &quot;n003144&quot;,
              &quot;n003146&quot;,
              &quot;n003148&quot;,
              &quot;n003149&quot;,
              &quot;n003151&quot;,
              &quot;n003152&quot;,
              &quot;n003153&quot;,
              &quot;n003154&quot;,
              &quot;n003156&quot;,
              &quot;n003158&quot;,
              &quot;n003159&quot;,
              &quot;n003162&quot;,
              &quot;n003163&quot;,
              &quot;n003164&quot;,
              &quot;n003165&quot;,
              &quot;n002903_ALT&quot;,
              &quot;n002911_ALT&quot;,
              &quot;n002914_ALT.mod&quot;,
              &quot;n002919_ALTm&quot;,
              &quot;n002928_ALT.mod&quot;,
              &quot;n003000_ALT.mod&quot;,
              &quot;n003002_ALT&quot;,
              &quot;n003009_ALT&quot;,
              &quot;n003011_ALT&quot;,
              &quot;n003022_ALT&quot;,
              &quot;n003025_ALT&quot;,
              &quot;n003028_ALT&quot;,
              &quot;n003029_ALT&quot;,
              &quot;n003035_ALT&quot;,
              &quot;n003056_ALT&quot;,
              &quot;n003071_ALT&quot;,
              &quot;n003072_ALT&quot;,
              &quot;n003073_ALT.mod&quot;,
              &quot;n003105_ALT&quot;,
              &quot;n003106_ALT&quot;,
              &quot;n003111_ALT&quot;,
              &quot;n003120_ALTm&quot;,
              &quot;n003133_ALT&quot;,
              &quot;n003145_ALT&quot;,
              &quot;n003147_ALT&quot;,
              &quot;n003150_ALT.mod&quot;,
              &quot;n003155_ALT&quot;,
              &quot;n003157_ALT&quot;,
              &quot;n003160_ALT.mod&quot;,
              &quot;n003161_ALT&quot;,
              &quot;n002929_ALT&quot;,
              &quot;n002931_ALT&quot;,
              &quot;n002935_ALT&quot;,
              &quot;n002938_ALT&quot;,
              &quot;n002940_ALT&quot;,
              &quot;n002951_ALT&quot;,
              &quot;n002960_ALT&quot;,
              &quot;n002966_ALT&quot;,
              &quot;n002970_ALT&quot;,
              &quot;n002972_ALT&quot;,
              &quot;n002979_ALT&quot;,
              &quot;n002986_ALT&quot;,
              &quot;n002988_ALT&quot;,
              &quot;n003010_ALT.mod&quot;,
              &quot;n002908_ALT.mod&quot;,
              &quot;n002985_ALT&quot;,
              &quot;n003123_ALT&quot;,
              &quot;n003131_ALT&quot;
            ],
            &quot;weight&quot;: null
          }
        ],
        &quot;min_questions&quot;: 265,
        &quot;max_questions&quot;: 265,
        &quot;batch_size&quot;: 265
      }
    }
  ],
  &quot;recipe_name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;recipe_id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;recipe_uri&quot;: &quot;atom://content/rn-question-trainer-test-7&quot;,
  &quot;performance_recipe&quot;: {
    &quot;name&quot;: &quot;default&quot;,
    &quot;kaplan_type&quot;: &quot;performance-recipe&quot;,
    &quot;aggregations&quot;: [{ &quot;name&quot;: &quot;overall&quot;, &quot;sections&quot;: [&quot;ALL&quot;] }]
  }
}
</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3. Pass Yield_scale_name  to request" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">ParentId: ${parentId}</stringProp>
          <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;schema&quot;: &quot;2.0&quot;,
  &quot;name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;position&quot;: 0,
  &quot;active&quot;: true,
  &quot;created_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;updated_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;title&quot;: &quot;RN Question Trainer Test 7&quot;,
  &quot;description&quot;: null,
  &quot;timer_recipe&quot;: { &quot;allocated_time&quot;: 0, &quot;question_suggested_time&quot;: 72000 },
  &quot;recipe_type&quot;: &quot;question-trainers&quot;,
  &quot;randomize_answer_choices&quot;: false,
  &quot;metadata&quot;: {
    &quot;subject&quot;: &quot;&quot;,
    &quot;thresholdpercentcorrect&quot;: &quot;60&quot;,
    &quot;thresholdpercentilerank&quot;: &quot;0&quot;
  },
  &quot;taxonomy_uris&quot;: [
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneeds-taxonomy&quot;,
      &quot;version_id&quot;: &quot;f1857208-c20c-4c5d-833a-3ea13adf8cdf&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-cognitivelevel-taxonomy&quot;,
      &quot;version_id&quot;: &quot;fe0c3b48-e530-4727-8e59-082946f38d33&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneedcategory-taxonomy&quot;,
      &quot;version_id&quot;: &quot;b721d04b-37ff-4dd4-b159-685de67066bf&quot;
    }
  ],
  &quot;performance_recipe_uri&quot;: null,
  &quot;norms_uri&quot;: null,
  &quot;assessment_recipe&quot;: {
    &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
    &quot;strands&quot;: [
      {
        &quot;name&quot;: &quot;safe_effective_care_environment&quot;,
        &quot;substrand_names&quot;: [&quot;management_care&quot;, &quot;safety_infection_control&quot;],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;health_promotion_maintenance&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;psychosocial_integrity&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;physiological_integrity&quot;,
        &quot;substrand_names&quot;: [
          &quot;basic_care_comfort&quot;,
          &quot;pharmacological_therapies&quot;,
          &quot;reduction_risk_potential&quot;,
          &quot;physiological_adaptation&quot;
        ],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;knowledge&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;comprehension&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;application&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;analysis&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      }
    ],
    &quot;max_theta&quot;: null,
    &quot;min_theta&quot;: null
  },
  &quot;sections&quot;: [
    {
      &quot;id&quot;: &quot;f45bcf0d-2391-42b5-9ec2-c5c31a5e65c1&quot;,
      &quot;schema&quot;: &quot;2.0&quot;,
      &quot;name&quot;: &quot;section1&quot;,
      &quot;kaplan_type&quot;: &quot;sequence-section&quot;,
      &quot;parent&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
      &quot;position&quot;: 0,
      &quot;active&quot;: true,
      &quot;created_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;updated_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;title&quot;: &quot;section1&quot;,
      &quot;metadata&quot;: null,
      &quot;randomize_answer_choices&quot;: true,
      &quot;timer_recipe&quot;: null,
      &quot;selection_recipe&quot;: {
        &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
        &quot;item_sources&quot;: [
          {
            &quot;source_type&quot;: &quot;PreStitched&quot;,
            &quot;item_selection_rule&quot;: &quot;Linear&quot;,
            &quot;item_exposure_candidates_count&quot;: null,
            &quot;require_calibrated&quot;: false,
            &quot;content_names&quot;: [
              &quot;n002901&quot;,
              &quot;n002902&quot;,
              &quot;n002904&quot;,
              &quot;n002905&quot;,
              &quot;n002906&quot;,
              &quot;n002907&quot;,
              &quot;n002909&quot;,
              &quot;n002910&quot;,
              &quot;n002912&quot;,
              &quot;n002913&quot;,
              &quot;n002915&quot;,
              &quot;n002916&quot;,
              &quot;n002917&quot;,
              &quot;n002918&quot;,
              &quot;n002920&quot;,
              &quot;n002921&quot;,
              &quot;n002922&quot;,
              &quot;n002923&quot;,
              &quot;n002924&quot;,
              &quot;n002925&quot;,
              &quot;n002926&quot;,
              &quot;n002927&quot;,
              &quot;n002930&quot;,
              &quot;n002932&quot;,
              &quot;n002933&quot;,
              &quot;n002934&quot;,
              &quot;n002936&quot;,
              &quot;n002937&quot;,
              &quot;n002939&quot;,
              &quot;n002941&quot;,
              &quot;n002942&quot;,
              &quot;n002943&quot;,
              &quot;n002944&quot;,
              &quot;n002945&quot;,
              &quot;n002946&quot;,
              &quot;n002947&quot;,
              &quot;n002948&quot;,
              &quot;n002949&quot;,
              &quot;n002950&quot;,
              &quot;n002952&quot;,
              &quot;n002953&quot;,
              &quot;n002954&quot;,
              &quot;n002955&quot;,
              &quot;n002956&quot;,
              &quot;n002957&quot;,
              &quot;n002958&quot;,
              &quot;n002959&quot;,
              &quot;n002961&quot;,
              &quot;n002962&quot;,
              &quot;n002963&quot;,
              &quot;n002964&quot;,
              &quot;n002965&quot;,
              &quot;n002967&quot;,
              &quot;n002968&quot;,
              &quot;n002969&quot;,
              &quot;n002971&quot;,
              &quot;n002973&quot;,
              &quot;n002974&quot;,
              &quot;n002975&quot;,
              &quot;n002976&quot;,
              &quot;n002977&quot;,
              &quot;n002978&quot;,
              &quot;n002980&quot;,
              &quot;n002981&quot;,
              &quot;n002982&quot;,
              &quot;n002983&quot;,
              &quot;n002984&quot;,
              &quot;n002987&quot;,
              &quot;n002989&quot;,
              &quot;n002990&quot;,
              &quot;n002991&quot;,
              &quot;n002992&quot;,
              &quot;n002993&quot;,
              &quot;n002994&quot;,
              &quot;n002995&quot;,
              &quot;n002996&quot;,
              &quot;n002997&quot;,
              &quot;n002998&quot;,
              &quot;n002999&quot;,
              &quot;n003001&quot;,
              &quot;n003003&quot;,
              &quot;n003004&quot;,
              &quot;n003005&quot;,
              &quot;n003006&quot;,
              &quot;n003007&quot;,
              &quot;n003008&quot;,
              &quot;n003012&quot;,
              &quot;n003013&quot;,
              &quot;n003014&quot;,
              &quot;n003015&quot;,
              &quot;n003016&quot;,
              &quot;n003017&quot;,
              &quot;n003018&quot;,
              &quot;n003019&quot;,
              &quot;n003020&quot;,
              &quot;n003021&quot;,
              &quot;n003023&quot;,
              &quot;n003024&quot;,
              &quot;n003026&quot;,
              &quot;n003027&quot;,
              &quot;n003030&quot;,
              &quot;n003031&quot;,
              &quot;n003032&quot;,
              &quot;n003033&quot;,
              &quot;n003034&quot;,
              &quot;n003036&quot;,
              &quot;n003037&quot;,
              &quot;n003038&quot;,
              &quot;n003039&quot;,
              &quot;n003040&quot;,
              &quot;n003041&quot;,
              &quot;n003042&quot;,
              &quot;n003043&quot;,
              &quot;n003044&quot;,
              &quot;n003045&quot;,
              &quot;n003046&quot;,
              &quot;n003047&quot;,
              &quot;n003048&quot;,
              &quot;n003049&quot;,
              &quot;n003050&quot;,
              &quot;n003051&quot;,
              &quot;n003052&quot;,
              &quot;n003053&quot;,
              &quot;n003054&quot;,
              &quot;n003055&quot;,
              &quot;n003057&quot;,
              &quot;n003058&quot;,
              &quot;n003059&quot;,
              &quot;n003060&quot;,
              &quot;n003061&quot;,
              &quot;n003062&quot;,
              &quot;n003063&quot;,
              &quot;n003064&quot;,
              &quot;n003065&quot;,
              &quot;n003066&quot;,
              &quot;n003067&quot;,
              &quot;n003068&quot;,
              &quot;n003069&quot;,
              &quot;n003070&quot;,
              &quot;n003074&quot;,
              &quot;n003075&quot;,
              &quot;n003076&quot;,
              &quot;n003077&quot;,
              &quot;n003078&quot;,
              &quot;n003079&quot;,
              &quot;n003080&quot;,
              &quot;n003081&quot;,
              &quot;n003082&quot;,
              &quot;n003083&quot;,
              &quot;n003084&quot;,
              &quot;n003085&quot;,
              &quot;n003086&quot;,
              &quot;n003087&quot;,
              &quot;n003088&quot;,
              &quot;n003089&quot;,
              &quot;n003090&quot;,
              &quot;n003091&quot;,
              &quot;n003092&quot;,
              &quot;n003093&quot;,
              &quot;n003094&quot;,
              &quot;n003095&quot;,
              &quot;n003096&quot;,
              &quot;n003097&quot;,
              &quot;n003098&quot;,
              &quot;n003099&quot;,
              &quot;n003100&quot;,
              &quot;n003101&quot;,
              &quot;n003102&quot;,
              &quot;n003103&quot;,
              &quot;n003104&quot;,
              &quot;n003107&quot;,
              &quot;n003108&quot;,
              &quot;n003109&quot;,
              &quot;n003110&quot;,
              &quot;n003112&quot;,
              &quot;n003113&quot;,
              &quot;n003114&quot;,
              &quot;n003115&quot;,
              &quot;n003116&quot;,
              &quot;n003117&quot;,
              &quot;n003118&quot;,
              &quot;n003119&quot;,
              &quot;n003121&quot;,
              &quot;n003122&quot;,
              &quot;n003124&quot;,
              &quot;n003125&quot;,
              &quot;n003126&quot;,
              &quot;n003127&quot;,
              &quot;n003128&quot;,
              &quot;n003129&quot;,
              &quot;n003130&quot;,
              &quot;n003132&quot;,
              &quot;n003134_ALTm.mod&quot;,
              &quot;n003135&quot;,
              &quot;n003136&quot;,
              &quot;n003137&quot;,
              &quot;n003138&quot;,
              &quot;n003139&quot;,
              &quot;n003140&quot;,
              &quot;n003141&quot;,
              &quot;n003142&quot;,
              &quot;n003143&quot;,
              &quot;n003144&quot;,
              &quot;n003146&quot;,
              &quot;n003148&quot;,
              &quot;n003149&quot;,
              &quot;n003151&quot;,
              &quot;n003152&quot;,
              &quot;n003153&quot;,
              &quot;n003154&quot;,
              &quot;n003156&quot;,
              &quot;n003158&quot;,
              &quot;n003159&quot;,
              &quot;n003162&quot;,
              &quot;n003163&quot;,
              &quot;n003164&quot;,
              &quot;n003165&quot;,
              &quot;n002903_ALT&quot;,
              &quot;n002911_ALT&quot;,
              &quot;n002914_ALT.mod&quot;,
              &quot;n002919_ALTm&quot;,
              &quot;n002928_ALT.mod&quot;,
              &quot;n003000_ALT.mod&quot;,
              &quot;n003002_ALT&quot;,
              &quot;n003009_ALT&quot;,
              &quot;n003011_ALT&quot;,
              &quot;n003022_ALT&quot;,
              &quot;n003025_ALT&quot;,
              &quot;n003028_ALT&quot;,
              &quot;n003029_ALT&quot;,
              &quot;n003035_ALT&quot;,
              &quot;n003056_ALT&quot;,
              &quot;n003071_ALT&quot;,
              &quot;n003072_ALT&quot;,
              &quot;n003073_ALT.mod&quot;,
              &quot;n003105_ALT&quot;,
              &quot;n003106_ALT&quot;,
              &quot;n003111_ALT&quot;,
              &quot;n003120_ALTm&quot;,
              &quot;n003133_ALT&quot;,
              &quot;n003145_ALT&quot;,
              &quot;n003147_ALT&quot;,
              &quot;n003150_ALT.mod&quot;,
              &quot;n003155_ALT&quot;,
              &quot;n003157_ALT&quot;,
              &quot;n003160_ALT.mod&quot;,
              &quot;n003161_ALT&quot;,
              &quot;n002929_ALT&quot;,
              &quot;n002931_ALT&quot;,
              &quot;n002935_ALT&quot;,
              &quot;n002938_ALT&quot;,
              &quot;n002940_ALT&quot;,
              &quot;n002951_ALT&quot;,
              &quot;n002960_ALT&quot;,
              &quot;n002966_ALT&quot;,
              &quot;n002970_ALT&quot;,
              &quot;n002972_ALT&quot;,
              &quot;n002979_ALT&quot;,
              &quot;n002986_ALT&quot;,
              &quot;n002988_ALT&quot;,
              &quot;n003010_ALT.mod&quot;,
              &quot;n002908_ALT.mod&quot;,
              &quot;n002985_ALT&quot;,
              &quot;n003123_ALT&quot;,
              &quot;n003131_ALT&quot;
            ],
            &quot;weight&quot;: null
          }
        ],
        &quot;min_questions&quot;: 265,
        &quot;max_questions&quot;: 265,
        &quot;batch_size&quot;: 265
      }
    }
  ],
  &quot;recipe_name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;recipe_id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;recipe_uri&quot;: &quot;atom://content/rn-question-trainer-test-7&quot;,
  &quot;performance_recipe&quot;: {
    &quot;name&quot;: &quot;default&quot;,
    &quot;kaplan_type&quot;: &quot;performance-recipe&quot;,
    &quot;aggregations&quot;: [{ &quot;name&quot;: &quot;overall&quot;, &quot;sections&quot;: [&quot;ALL&quot;] }]
  }
}
</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4. Pass Recency_name to request" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Recency_name: ${recency_name}</stringProp>
          <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;schema&quot;: &quot;2.0&quot;,
  &quot;name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;position&quot;: 0,
  &quot;active&quot;: true,
  &quot;created_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;updated_at&quot;: &quot;2018-05-11T16:33:57.63601Z&quot;,
  &quot;title&quot;: &quot;RN Question Trainer Test 7&quot;,
  &quot;description&quot;: null,
  &quot;timer_recipe&quot;: { &quot;allocated_time&quot;: 0, &quot;question_suggested_time&quot;: 72000 },
  &quot;recipe_type&quot;: &quot;question-trainers&quot;,
  &quot;randomize_answer_choices&quot;: false,
  &quot;metadata&quot;: {
    &quot;subject&quot;: &quot;&quot;,
    &quot;thresholdpercentcorrect&quot;: &quot;60&quot;,
    &quot;thresholdpercentilerank&quot;: &quot;0&quot;
  },
  &quot;taxonomy_uris&quot;: [
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneeds-taxonomy&quot;,
      &quot;version_id&quot;: &quot;f1857208-c20c-4c5d-833a-3ea13adf8cdf&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-cognitivelevel-taxonomy&quot;,
      &quot;version_id&quot;: &quot;fe0c3b48-e530-4727-8e59-082946f38d33&quot;
    },
    {
      &quot;uri&quot;: &quot;atom://content/nclex-rn-clientneedcategory-taxonomy&quot;,
      &quot;version_id&quot;: &quot;b721d04b-37ff-4dd4-b159-685de67066bf&quot;
    }
  ],
  &quot;performance_recipe_uri&quot;: null,
  &quot;norms_uri&quot;: null,
  &quot;assessment_recipe&quot;: {
    &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
    &quot;strands&quot;: [
      {
        &quot;name&quot;: &quot;safe_effective_care_environment&quot;,
        &quot;substrand_names&quot;: [&quot;management_care&quot;, &quot;safety_infection_control&quot;],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;health_promotion_maintenance&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;psychosocial_integrity&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;physiological_integrity&quot;,
        &quot;substrand_names&quot;: [
          &quot;basic_care_comfort&quot;,
          &quot;pharmacological_therapies&quot;,
          &quot;reduction_risk_potential&quot;,
          &quot;physiological_adaptation&quot;
        ],
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;knowledge&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;comprehension&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;application&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      },
      {
        &quot;name&quot;: &quot;analysis&quot;,
        &quot;recency_threshold&quot;: 200,
        &quot;difficulty_levels&quot;: [
          { &quot;name&quot;: &quot;easy&quot;, &quot;min&quot;: null },
          { &quot;name&quot;: &quot;medium&quot;, &quot;min&quot;: 0 },
          { &quot;name&quot;: &quot;hard&quot;, &quot;min&quot;: 1 }
        ],
        &quot;yield_scale&quot;: { &quot;name&quot;: &quot;wayne&quot;, &quot;coefficient&quot;: 0.26 }
      }
    ],
    &quot;max_theta&quot;: null,
    &quot;min_theta&quot;: null
  },
  &quot;sections&quot;: [
    {
      &quot;id&quot;: &quot;f45bcf0d-2391-42b5-9ec2-c5c31a5e65c1&quot;,
      &quot;schema&quot;: &quot;2.0&quot;,
      &quot;name&quot;: &quot;section1&quot;,
      &quot;kaplan_type&quot;: &quot;sequence-section&quot;,
      &quot;parent&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
      &quot;position&quot;: 0,
      &quot;active&quot;: true,
      &quot;created_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;updated_at&quot;: &quot;2018-04-20T18:20:07.370481997Z&quot;,
      &quot;title&quot;: &quot;section1&quot;,
      &quot;metadata&quot;: null,
      &quot;randomize_answer_choices&quot;: true,
      &quot;timer_recipe&quot;: null,
      &quot;selection_recipe&quot;: {
        &quot;item_pool_name&quot;: &quot;sn_879cb&quot;,
        &quot;item_sources&quot;: [
          {
            &quot;source_type&quot;: &quot;PreStitched&quot;,
            &quot;item_selection_rule&quot;: &quot;Linear&quot;,
            &quot;item_exposure_candidates_count&quot;: null,
            &quot;require_calibrated&quot;: false,
            &quot;content_names&quot;: [
              &quot;n002901&quot;,
              &quot;n002902&quot;,
              &quot;n002904&quot;,
              &quot;n002905&quot;,
              &quot;n002906&quot;,
              &quot;n002907&quot;,
              &quot;n002909&quot;,
              &quot;n002910&quot;,
              &quot;n002912&quot;,
              &quot;n002913&quot;,
              &quot;n002915&quot;,
              &quot;n002916&quot;,
              &quot;n002917&quot;,
              &quot;n002918&quot;,
              &quot;n002920&quot;,
              &quot;n002921&quot;,
              &quot;n002922&quot;,
              &quot;n002923&quot;,
              &quot;n002924&quot;,
              &quot;n002925&quot;,
              &quot;n002926&quot;,
              &quot;n002927&quot;,
              &quot;n002930&quot;,
              &quot;n002932&quot;,
              &quot;n002933&quot;,
              &quot;n002934&quot;,
              &quot;n002936&quot;,
              &quot;n002937&quot;,
              &quot;n002939&quot;,
              &quot;n002941&quot;,
              &quot;n002942&quot;,
              &quot;n002943&quot;,
              &quot;n002944&quot;,
              &quot;n002945&quot;,
              &quot;n002946&quot;,
              &quot;n002947&quot;,
              &quot;n002948&quot;,
              &quot;n002949&quot;,
              &quot;n002950&quot;,
              &quot;n002952&quot;,
              &quot;n002953&quot;,
              &quot;n002954&quot;,
              &quot;n002955&quot;,
              &quot;n002956&quot;,
              &quot;n002957&quot;,
              &quot;n002958&quot;,
              &quot;n002959&quot;,
              &quot;n002961&quot;,
              &quot;n002962&quot;,
              &quot;n002963&quot;,
              &quot;n002964&quot;,
              &quot;n002965&quot;,
              &quot;n002967&quot;,
              &quot;n002968&quot;,
              &quot;n002969&quot;,
              &quot;n002971&quot;,
              &quot;n002973&quot;,
              &quot;n002974&quot;,
              &quot;n002975&quot;,
              &quot;n002976&quot;,
              &quot;n002977&quot;,
              &quot;n002978&quot;,
              &quot;n002980&quot;,
              &quot;n002981&quot;,
              &quot;n002982&quot;,
              &quot;n002983&quot;,
              &quot;n002984&quot;,
              &quot;n002987&quot;,
              &quot;n002989&quot;,
              &quot;n002990&quot;,
              &quot;n002991&quot;,
              &quot;n002992&quot;,
              &quot;n002993&quot;,
              &quot;n002994&quot;,
              &quot;n002995&quot;,
              &quot;n002996&quot;,
              &quot;n002997&quot;,
              &quot;n002998&quot;,
              &quot;n002999&quot;,
              &quot;n003001&quot;,
              &quot;n003003&quot;,
              &quot;n003004&quot;,
              &quot;n003005&quot;,
              &quot;n003006&quot;,
              &quot;n003007&quot;,
              &quot;n003008&quot;,
              &quot;n003012&quot;,
              &quot;n003013&quot;,
              &quot;n003014&quot;,
              &quot;n003015&quot;,
              &quot;n003016&quot;,
              &quot;n003017&quot;,
              &quot;n003018&quot;,
              &quot;n003019&quot;,
              &quot;n003020&quot;,
              &quot;n003021&quot;,
              &quot;n003023&quot;,
              &quot;n003024&quot;,
              &quot;n003026&quot;,
              &quot;n003027&quot;,
              &quot;n003030&quot;,
              &quot;n003031&quot;,
              &quot;n003032&quot;,
              &quot;n003033&quot;,
              &quot;n003034&quot;,
              &quot;n003036&quot;,
              &quot;n003037&quot;,
              &quot;n003038&quot;,
              &quot;n003039&quot;,
              &quot;n003040&quot;,
              &quot;n003041&quot;,
              &quot;n003042&quot;,
              &quot;n003043&quot;,
              &quot;n003044&quot;,
              &quot;n003045&quot;,
              &quot;n003046&quot;,
              &quot;n003047&quot;,
              &quot;n003048&quot;,
              &quot;n003049&quot;,
              &quot;n003050&quot;,
              &quot;n003051&quot;,
              &quot;n003052&quot;,
              &quot;n003053&quot;,
              &quot;n003054&quot;,
              &quot;n003055&quot;,
              &quot;n003057&quot;,
              &quot;n003058&quot;,
              &quot;n003059&quot;,
              &quot;n003060&quot;,
              &quot;n003061&quot;,
              &quot;n003062&quot;,
              &quot;n003063&quot;,
              &quot;n003064&quot;,
              &quot;n003065&quot;,
              &quot;n003066&quot;,
              &quot;n003067&quot;,
              &quot;n003068&quot;,
              &quot;n003069&quot;,
              &quot;n003070&quot;,
              &quot;n003074&quot;,
              &quot;n003075&quot;,
              &quot;n003076&quot;,
              &quot;n003077&quot;,
              &quot;n003078&quot;,
              &quot;n003079&quot;,
              &quot;n003080&quot;,
              &quot;n003081&quot;,
              &quot;n003082&quot;,
              &quot;n003083&quot;,
              &quot;n003084&quot;,
              &quot;n003085&quot;,
              &quot;n003086&quot;,
              &quot;n003087&quot;,
              &quot;n003088&quot;,
              &quot;n003089&quot;,
              &quot;n003090&quot;,
              &quot;n003091&quot;,
              &quot;n003092&quot;,
              &quot;n003093&quot;,
              &quot;n003094&quot;,
              &quot;n003095&quot;,
              &quot;n003096&quot;,
              &quot;n003097&quot;,
              &quot;n003098&quot;,
              &quot;n003099&quot;,
              &quot;n003100&quot;,
              &quot;n003101&quot;,
              &quot;n003102&quot;,
              &quot;n003103&quot;,
              &quot;n003104&quot;,
              &quot;n003107&quot;,
              &quot;n003108&quot;,
              &quot;n003109&quot;,
              &quot;n003110&quot;,
              &quot;n003112&quot;,
              &quot;n003113&quot;,
              &quot;n003114&quot;,
              &quot;n003115&quot;,
              &quot;n003116&quot;,
              &quot;n003117&quot;,
              &quot;n003118&quot;,
              &quot;n003119&quot;,
              &quot;n003121&quot;,
              &quot;n003122&quot;,
              &quot;n003124&quot;,
              &quot;n003125&quot;,
              &quot;n003126&quot;,
              &quot;n003127&quot;,
              &quot;n003128&quot;,
              &quot;n003129&quot;,
              &quot;n003130&quot;,
              &quot;n003132&quot;,
              &quot;n003134_ALTm.mod&quot;,
              &quot;n003135&quot;,
              &quot;n003136&quot;,
              &quot;n003137&quot;,
              &quot;n003138&quot;,
              &quot;n003139&quot;,
              &quot;n003140&quot;,
              &quot;n003141&quot;,
              &quot;n003142&quot;,
              &quot;n003143&quot;,
              &quot;n003144&quot;,
              &quot;n003146&quot;,
              &quot;n003148&quot;,
              &quot;n003149&quot;,
              &quot;n003151&quot;,
              &quot;n003152&quot;,
              &quot;n003153&quot;,
              &quot;n003154&quot;,
              &quot;n003156&quot;,
              &quot;n003158&quot;,
              &quot;n003159&quot;,
              &quot;n003162&quot;,
              &quot;n003163&quot;,
              &quot;n003164&quot;,
              &quot;n003165&quot;,
              &quot;n002903_ALT&quot;,
              &quot;n002911_ALT&quot;,
              &quot;n002914_ALT.mod&quot;,
              &quot;n002919_ALTm&quot;,
              &quot;n002928_ALT.mod&quot;,
              &quot;n003000_ALT.mod&quot;,
              &quot;n003002_ALT&quot;,
              &quot;n003009_ALT&quot;,
              &quot;n003011_ALT&quot;,
              &quot;n003022_ALT&quot;,
              &quot;n003025_ALT&quot;,
              &quot;n003028_ALT&quot;,
              &quot;n003029_ALT&quot;,
              &quot;n003035_ALT&quot;,
              &quot;n003056_ALT&quot;,
              &quot;n003071_ALT&quot;,
              &quot;n003072_ALT&quot;,
              &quot;n003073_ALT.mod&quot;,
              &quot;n003105_ALT&quot;,
              &quot;n003106_ALT&quot;,
              &quot;n003111_ALT&quot;,
              &quot;n003120_ALTm&quot;,
              &quot;n003133_ALT&quot;,
              &quot;n003145_ALT&quot;,
              &quot;n003147_ALT&quot;,
              &quot;n003150_ALT.mod&quot;,
              &quot;n003155_ALT&quot;,
              &quot;n003157_ALT&quot;,
              &quot;n003160_ALT.mod&quot;,
              &quot;n003161_ALT&quot;,
              &quot;n002929_ALT&quot;,
              &quot;n002931_ALT&quot;,
              &quot;n002935_ALT&quot;,
              &quot;n002938_ALT&quot;,
              &quot;n002940_ALT&quot;,
              &quot;n002951_ALT&quot;,
              &quot;n002960_ALT&quot;,
              &quot;n002966_ALT&quot;,
              &quot;n002970_ALT&quot;,
              &quot;n002972_ALT&quot;,
              &quot;n002979_ALT&quot;,
              &quot;n002986_ALT&quot;,
              &quot;n002988_ALT&quot;,
              &quot;n003010_ALT.mod&quot;,
              &quot;n002908_ALT.mod&quot;,
              &quot;n002985_ALT&quot;,
              &quot;n003123_ALT&quot;,
              &quot;n003131_ALT&quot;
            ],
            &quot;weight&quot;: null
          }
        ],
        &quot;min_questions&quot;: 265,
        &quot;max_questions&quot;: 265,
        &quot;batch_size&quot;: 265
      }
    }
  ],
  &quot;recipe_name&quot;: &quot;rn-question-trainer-test-7&quot;,
  &quot;recipe_id&quot;: &quot;5a0102c8-18db-4adc-a835-80b1bb7e15ce&quot;,
  &quot;recipe_uri&quot;: &quot;atom://content/rn-question-trainer-test-7&quot;,
  &quot;performance_recipe&quot;: {
    &quot;name&quot;: &quot;default&quot;,
    &quot;kaplan_type&quot;: &quot;performance-recipe&quot;,
    &quot;aggregations&quot;: [{ &quot;name&quot;: &quot;overall&quot;, &quot;sections&quot;: [&quot;ALL&quot;] }]
  }
}
</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MyTest" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10. http://blazedemo.com/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="city" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">city</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;option value=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No_fromPort</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="toPort" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">fromPort</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;option value=&quot;(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">No_fromPort</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String tempcity = vars.get(&quot;oldcity&quot;);
if (tempcity == &quot;Seoul&quot;) {
	tempcity = &quot;Paris&quot; ;
} else {
	tempcity = &quot;New york&quot;;
}
vars.put(&quot;newcity&quot;, tempcity)
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="20. http://blazedemo.com/reserve.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">${tempcity}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">${city_9}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="newcity" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${newcity}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">newcity</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">reserve.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="flight" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flight</stringProp>
              <stringProp name="RegexExtractor.regex">  &lt;input type=&quot;hidden&quot; value=&quot;(.+?)&quot; name=&quot;flight&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No_flight</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="price" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">price</stringProp>
              <stringProp name="RegexExtractor.regex">  &lt;input type=&quot;hidden&quot; value=&quot;(.+?)&quot; name=&quot;price&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No_price</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="airline" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">airline</stringProp>
              <stringProp name="RegexExtractor.regex">  &lt;input type=&quot;hidden&quot; value=&quot;(.+?)&quot; name=&quot;airline&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No_airline</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="30. http://blazedemo.com/purchase.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="flight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">flight</stringProp>
                  <stringProp name="Argument.value">${flight_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">${city_3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="price" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">price</stringProp>
                  <stringProp name="Argument.value">${price_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">${city_9}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="airline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">airline</stringProp>
                  <stringProp name="Argument.value">${airline_1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">purchase.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/reserve.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="40. http://blazedemo.com/confirmation.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="zipCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">zipCode</stringProp>
                  <stringProp name="Argument.value">13425</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="address" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">address</stringProp>
                  <stringProp name="Argument.value">127 main st.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">Hometown</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="nameOnCard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">nameOnCard</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="cardType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">cardType</stringProp>
                  <stringProp name="Argument.value">visa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardMonth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardMonth</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_token</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rememberMe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rememberMe</stringProp>
                  <stringProp name="Argument.value">on</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                  <stringProp name="Argument.value">MA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="creditCardYear" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">creditCardYear</stringProp>
                  <stringProp name="Argument.value">2017</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="inputName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">inputName</stringProp>
                  <stringProp name="Argument.value">TK</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">confirmation.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/purchase.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="50. http://blazedemo.com/purchase.php" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="flight" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">flight</stringProp>
                  <stringProp name="Argument.value">234</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fromPort</stringProp>
                  <stringProp name="Argument.value">Boston</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="price" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">price</stringProp>
                  <stringProp name="Argument.value">432.98</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toPort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">toPort</stringProp>
                  <stringProp name="Argument.value">Rome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="airline" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">airline</stringProp>
                  <stringProp name="Argument.value">United Airlines</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">purchase.php</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://blazedemo.com/reserve.php</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
